upstream web {
  ip_hash;
  server python:5000;
}

# portal
server {
  # handle django static files
  location /static/ {
    autoindex off;
    alias /static_files/;
  }

  # handle x-accel-redirect (with an alias to /uploaded_files/)
  location /uploads/ {
    internal;
    autoindex off;
    alias /uploaded_files/;

    etag off;

    # handle x-accel- headers
    add_header Content-Length $upstream_http_x_accel_content_length;
    add_header Last-Modified $upstream_http_x_accel_last_modified;
    add_header etag $upstream_http_x_accel_etag;
  }


  error_page 588 = @saveinfile;


  location /webdav/ {
    # allow body to be big enough for large files
    client_max_body_size       20G;

    # handle put requests differently...

    # make sure to redirect put requests for /webdav
    if ($request_method = PUT) {
      return 588;
    }

    include conf.d/django.proxy;
  }

  location /fsdav/ {
    # allow body to be big enough for large files
    client_max_body_size       20G;

    # handle put requests differently...

    # make sure to redirect put requests for /fsdav
    if ($request_method = PUT) {
      return 588;
    }

    include conf.d/django.proxy;
  }

  location = /_try_authenticate {
    # authentication request (internal only)
    internal;

    client_max_body_size       20G;

    # disable body, body is already handled by client_body_temp_path
    proxy_set_body             off;

    include conf.d/django.proxy;
  }

  # from https://stackoverflow.com/questions/44371643/nginx-php-failing-with-large-file-uploads-over-6-gb/44751210#44751210
  location @saveinfile {
    # auth via backend (if the subrequest returns a 2xx response code, the access is allowed. If it returns 401 or 403,
    # the access is denied) before we store the file
    # see http://nginx.org/en/docs/http/ngx_http_auth_request_module.html
    auth_request               /_try_authenticate;

    # timeout for uploads
    proxy_read_timeout 60;
    proxy_connect_timeout 60;

    # handle uploads using body to file
    client_body_temp_path      /uploaded_files/tmp;
    client_body_in_file_only   on;
    client_body_buffer_size    1M;
    # specify a header, telling our application that the file has already been stored
    proxy_set_header           X-File-Name $request_body_file;
    # disable body, body is already handled by client_body_temp_path
    proxy_set_body             off;

    include conf.d/django.proxy;
  }


  location / {
    include conf.d/django.proxy;
  }

  listen 8000;
  server_name localhost;
}